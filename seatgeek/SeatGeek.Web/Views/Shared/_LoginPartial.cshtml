@using Microsoft.AspNetCore.Identity
@using SeatGeek.Data.Models
@using SeatGeek.Services.Data.Interfaces
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@using SeatGeek.Web.Infrastructure.Extensions


@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserService UserService
@inject IAgentService AgentService
@{
        bool isUserAgent = await AgentService.AgentExistsByUserIdAsync(User.GetId()!);
        string userName = await UserService.GetNameByEmailAsync(User.Identity?.Name!);
}
<div class="d-inline-flex">
    <ul class="navbar-nav">
        @if (SignInManager.IsSignedIn(User))
        {
          
               <li class="nav-item" style="font-size: 16px">
                <a class="nav-link text-white" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello,@userName</a>
               </li>
                @if (!isUserAgent)
                {
                <li class="nav-item">
                    <a class="nav-link text-white" asp-area="" asp-controller="Agent" asp-action="Become">Become Agent</a>
                </li>
                }
               <li class="nav-item">
                <form class="nav-link" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                    <button type="submit" class="btn ">LOGOUT</button>
                </form>
               </li>
            
            
        }
        else
        {
            <li class="nav-item">
                <a class="nav-link text-white" asp-area="" asp-controller="User" asp-action="Register">Register</a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-white" asp-area="" asp-controller="User" asp-action="Login">Login</a>
            </li>
        }
    </ul>

</div>
